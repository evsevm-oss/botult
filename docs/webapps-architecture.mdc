## Telegram Web Apps (архитектура)

### Поток аутентификации
1) Telegram Mini App загружается внутри клиента Telegram → `initData`
2) Бэкенд валидирует подпись `initData` (секрет бота), извлекает `user`/`chat`/`start_param`
3) Выдаёт короткоживущий токен WebApp (JWT) → используется для REST/WS запросов (`POST /api/webapp/verify`, `POST /api/webapp/refresh`)

### Клиент
- React/Vite → `webapp/src/TelegramWebAppMainMockup.tsx` (TypeScript)
- Auth: `ensureAuth()` читает `initData`, запрашивает JWT и авто‑пролонгирует; `apiFetch()` добавляет `Authorization`
- Хранение состояния в LocalStorage, скелетоны и офлайн‑статус, aria‑атрибуты
- Виджеты: KPI (цель/калории/протеин/вес/жир), графики (вес/%жира, калории/протеин), дневник с навигацией по датам

### Серверные эндпоинты (минимум)
- `GET /api/me/summary` — дневные бюджеты и сводка
- `POST /api/meals` — создать приём пищи (текст/фото)
- `GET /api/meals?date=YYYY-MM-DD` — список приемов за день

### Эндпоинты для отчётов/трендов (интеграция WebApp)
- `GET /api/summary/daily|weekly|monthly`
- `GET /api/trends?window=7|30` (ккал/БЖУ/вес)
- `GET /api/compliance?range=week|month`
- `GET /api/alerts` (пропуски/выбросы/нуджи)
- `GET /api/summary/weekly.csv` (экспорт)

### Auth WebApp (детали)
- `POST /api/webapp/verify` — валидирует `initData`, возвращает JWT (ttl ~ 30–60 минут)
- Хранение токена на клиенте; обновление по 401; logout стирает токен из LocalStorage

### Хостинг и деплой WebApp
- Сборка фронтенда: `npm ci && npm run build` → `dist/`
- Раздача статики: FastAPI `StaticFiles` по `/webapp/` (см. `infra/api/app.py`), CSP заголовки для Mini App
- Vite `base: '/webapp/'`, asset hashing по умолчанию

### Навигация из бота
- Кнопка `web_app` и deeplink из сообщений/рассылок (CTA), поддержка параметров `screen/date`

### Безопасность
- Проверка подписи `initData`, ограничение CORS, короткие TTL токена, ограничение происхождения загрузки (Telegram)
- Защита от XSS (CSP), отрисовка данных только после верификации токена

