## WebApp UI/Dev правила

### Общие принципы
- Единый источник правды — серверные сводки/тренды; локальное состояние синхронизируется.
- Минимум скрытой магии: явные загрузки, явные ошибки, скелетоны вместо скачков контента.
- Адаптивная верстка под Telegram: safe‑area insets, компактные кликабельные элементы, клавиатурная доступность.

### Структура и экраны
- Верхние KPI (цель, калории, протеин, вес, % жира) — кликабельны → модалки редактирования/ввода.
- Графики: вес/% жира (периоды: неделя/месяц/квартал/год), калории/протеин (последние 7/30).
- Дневник: список блюд за день, CRUD, навигация по датам, итог ккал.

### Данные/интеграция
- Auth: `POST /api/webapp/verify` принимает `initData`, возвращает JWT (ttl 30–60 мин).
- Meals: `GET/POST/PATCH/DELETE /api/meals` — изменения триггерят пересчёт дневной сводки.
- Weights: `GET/POST /api/weights` — обновление пересчитывает тренды и бюджеты.
- BodyFat: `POST /api/bodyfat/estimate`, `POST /api/bodyfat` — сервер хранит замеры и расчёт.
- Summaries/Trends: `GET /api/summary/*`, `/api/trends`, `/api/compliance`, `/api/alerts`, `/api/summary/weekly.csv`.

### Валидации и UX
- Формы числовых полей — numeric/decimal inputMode, локаль RU для форматирования.
- Модалки: «Отмена/Сохранить», disabled при невалидных данных; описания полей внизу.
- Офлайн: показывать баннер «Нет подключения», блокировать изменения, кешировать последний вид.

### Front сборка/деплой
- Проект: React + Vite (TypeScript); сборка `npm ci && npm run build` → `dist/`.
- Статика: FastAPI `StaticFiles` по `/webapp/`, Vite `base: '/webapp/'`.
- CSP: ограничить источники, разрешить Telegram `*.telegram.org` и собственный домен/API.

### Будущее расширение
- Локализация (i18n), тёмная/светлая темы через Telegram Theme Params.
- Уведомления/рассылки: CTA открывают соответствующие экраны.
