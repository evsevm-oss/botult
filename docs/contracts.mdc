## Контракты (фрагменты)

### Фото и мульти‑фото

- POST `/api/photos` params: `telegram_id`, `content_type` body: bytes → `{ image_id }`
- POST `/api/photo-groups/commit` params: `telegram_id`, `group_id` → `{ handle_image_id, items[], clarifications[], images_count }`
- POST `/api/photos/{image_id}/save` params: `telegram_id` → `{ meal_id }`

### Нормализация текста/голоса

- POST `/api/normalize` body: `{ text: string, locale: 'ru'|'en', telegram_id?: number }`
  - response: `{ items: [{ name, unit, amount, kcal, protein_g, fat_g, carb_g, confidence, sources? }], quality?: { needs_clarification, clarifications[], issues[] } }`

### Черновик приёма

- Redis key: `meal:draft:{user_id}` TTL: 600 сек; структура: `{ items[], text, meta{} }`

## Контракты: DTO/ошибки/события

### DTO (минимум)
- UserDTO: `id`, `tg_id`, `lang`, `created_at`
- ProfileDTO: `user_id`, `sex`, `age`, `height_cm`, `weight_kg`, `activity_level`, `goal`
- MealItemDTO: `name`, `amount`, `unit`, `kcal`, `protein_g`, `fat_g`, `carb_g`, `confidence`
- MealDTO: `id`, `user_id`, `datetime`, `type`, `items: MealItemDTO[]`, `notes`
- BudgetsDTO: `kcal`, `protein_g`, `fat_g`, `carb_g`, `source`
 - WeightDTO: `id`, `user_id`, `date`, `weight_kg`
 - BodyFatDTO: `id`, `user_id`, `date`, `percent`

### Ошибки (коды)
- `E_INVALID_INPUT`
- `E_AI_UNAVAILABLE`
- `E_STORAGE_UNAVAILABLE`
- `E_RATE_LIMIT`

### События
- `meal.created` — после подтверждения приема пищи
- `profile.updated` — при изменении профиля/веса/цели
- `budgets.recalculated`
 - `weight.logged` — новое измерение веса
 - `bodyfat.logged` — новый замер % жира

Форматы ответов REST: `{ "ok": true, "data": … } | { "ok": false, "error": { "code": "…", "message": "…" } }`

## Meals API

- GET `/api/meals?date=YYYY-MM-DD&telegram_id=...` → `{ ok, data: { items: Meal[] } }`
- GET `/api/meals/{id}?telegram_id=...` → `{ ok, data: Meal }`
- POST `/api/meals?telegram_id=...` body `MealCreate` → `{ ok, data: { id } }`
- PATCH `/api/meals/{id}?telegram_id=...` body `MealUpdate` → `{ ok, data: { updated: true } }`
- DELETE `/api/meals/{id}?telegram_id=...` → `{ ok, data: { deleted: true } }`

### MealCreate
```json
{
  "at": "2025-01-01T12:34:56Z",
  "type": "lunch",
  "status": "draft|confirmed",
  "items": [
    { "name": "chicken", "unit": "g", "amount": 150, "kcal": 165, "protein_g": 31, "fat_g": 3.6, "carb_g": 0 }
  ],
  "notes": "...",
  "source_chat_id": 123,
  "source_message_id": 456,
  "source_update_id": 789
}
```

### MealUpdate
```json
{
  "at": "2025-01-01T12:34:56Z",
  "type": "dinner",
  "status": "confirmed",
  "items": [ ... ],
  "notes": "..."
}
```

### Errors
## Weights API

- GET `/api/weights?start=YYYY-MM-DD&end=YYYY-MM-DD&telegram_id=...` → `{ ok, data: { items: WeightDTO[] } }`
- POST `/api/weights?telegram_id=...` body `{ date: 'YYYY-MM-DD', weight_kg: number }` → `{ ok, data: { id } }`

## BodyFat API

- POST `/api/bodyfat/estimate?telegram_id=...` body `{ gender, height_cm, weight_kg, waist_cm, neck_cm }` → `{ ok, data: { percent } }`
- POST `/api/bodyfat?telegram_id=...` body `{ date: 'YYYY-MM-DD', percent: number }` → `{ ok, data: { id } }`

## WebApp Auth

- POST `/api/webapp/verify` body `{ initData: string }` → `{ ok, data: { token, exp } }`
- POST `/api/webapp/refresh` body `{ token: string }` → `{ ok, data: { token, exp } } | { ok:false, error:{ code: 'E_BAD_TOKEN' } }`

## Digest API

- POST `/api/digest/weekly/send?secret=...` → `{ ok, data: { sent } }` — рассылает недельный дайджест всем пользователям (MVP)

## Summaries/Trends API (для WebApp)

- GET `/api/summary/daily|weekly|monthly?telegram_id=...&...`
- GET `/api/trends?window=7|30&telegram_id=...`
- GET `/api/compliance?range=week|month&telegram_id=...`
- GET `/api/alerts?telegram_id=...`
- GET `/api/summary/weekly.csv?telegram_id=...`
- `E_DUPLICATE_MEAL_SOURCE` — нарушение идемпотентности (повторный `update_id`/`chat+message`)
- `E_VALIDATION` — некорректные значения (массы/БЖУ и др.)

