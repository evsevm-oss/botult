### Food Estimation Rules (GPT‑4o pipeline)

Документ описывает унифицированную систему оценки еды/продуктов из фото, текста, аудио и их комбинаций. Цели: повысить точность калорий и БЖУ, детектировать не‑еду и неадекватные сцены, поддержать постепенное дополнение информации пользователем перед сохранением в дневник.

## Обзор

- **Мультимодальные входы**: фото, текст, голос, комбинации.
- **Единый формат вывода**: `MealDraft` с `items[]`, флагами качества и вопросами для уточнений.
- **Этапы**:
  1) Предобработка медиа (resize/orientation), STT для аудио.
  2) Экстракция кандидатов: Vision для фото, Normalizer для текста/расшифровки.
  3) Фьюжн кандидатов в общий черновик (слияние, снятие конфликтов).
  4) Оценка порций: при отсутствии веса — стандартная порция + правки по контексту.
  5) Контроль качества: не‑еда, нереалистичность, аномальные БЖУ/ккал.
  6) Коммуникация: «предварительная информация», кнопки Сохранить/Отменить/Дополнить.
  7) Сохранение в БД (подтверждённый при нажатии «Сохранить»).

## Сущности и JSON‑схемы

- Совместим с текущими моделями БД и домена (`name`, `amount`, `unit: g|ml|piece`, `kcal`, `protein_g`, `fat_g`, `carb_g`, `confidence`). Добавлены флаги качества и поле источника.

```json
{
  "FoodItemEstimate": {
    "type": "object",
    "properties": {
      "name": {"type": "string"},
      "amount": {"type": "number"},
      "unit": {"type": "string", "enum": ["g", "ml", "piece"]},
      "kcal": {"type": "number"},
      "protein_g": {"type": "number"},
      "fat_g": {"type": "number"},
      "carb_g": {"type": "number"},
      "confidence": {"type": "number", "minimum": 0, "maximum": 1},
      "assumptions": {"type": "array", "items": {"type": "string"}},
      "sources": {
        "type": "array",
        "items": {"type": "string", "enum": ["vision", "text", "voice"]}
      }
    },
    "required": [
      "name", "amount", "unit", "kcal", "protein_g", "fat_g", "carb_g"
    ],
    "additionalProperties": false
  },
  "QualityFlags": {
    "type": "object",
    "properties": {
      "not_food_probability": {"type": "number", "minimum": 0, "maximum": 1},
      "unrealistic_scene_probability": {"type": "number", "minimum": 0, "maximum": 1},
      "needs_clarification": {"type": "boolean"},
      "clarifications": {"type": "array", "items": {"type": "string"}},
      "issues": {"type": "array", "items": {"type": "string"}}
    },
    "required": ["needs_clarification"],
    "additionalProperties": false
  },
  "MealDraft": {
    "type": "object",
    "properties": {
      "items": {
        "type": "array",
        "items": {"$ref": "#/FoodItemEstimate"}
      },
      "quality": {"$ref": "#/QualityFlags"},
      "totals": {
        "type": "object",
        "properties": {
          "kcal": {"type": "number"},
          "protein_g": {"type": "number"},
          "fat_g": {"type": "number"},
          "carb_g": {"type": "number"}
        },
        "required": ["kcal", "protein_g", "fat_g", "carb_g"],
        "additionalProperties": false
      },
      "draft_id": {"type": "string"},
      "window_started_at": {"type": "string", "format": "date-time"}
    },
    "required": ["items", "quality"],
    "additionalProperties": false
  }
}
```

Примечания:
- `draft_id` — идентификатор текущей сессии дополнения (напр., `user:{id}:meal_draft`, TTL 10 мин в Redis). 
- `sources` помогает объяснимости, конфликт‑резолвинг в фьюжне учитывает «пересечение источников».

## Выбор моделей

- Vision извлечение: `gpt-4o` (точность) или `gpt-4o-mini` (эконом), `response_format=json_object`.
- Текст/голос нормализация: `gpt-4o-mini` c `json_schema` (уже есть `services/llm/openai_normalize.py`).
- Фьюжн/валидация: `gpt-4o` (лучше в логической консолидации), `temperature: 0.2`.
- STT: `whisper-1` или `gpt-4o-mini-transcribe` (как fallback).

## Промпты

Все промпты возвращают JSON строго по схеме. Язык ответа — русский, числа в SИ, без текста вне JSON.

### Конфликт‑резолвинг (draft)

1) Если одна и та же позиция присутствует в vision и text/voice с разными массами — отдаём приоритет явным числам из text/voice, если они не противоречат изображению радикально.
2) При существенном конфликте (>40%) — `quality.needs_clarification=true` и короткий вопрос: «Уточните массу для {name}: {a} г или {b} г?».
3) Для жареных блюд без явного масла — задаём вопрос: «Жарили на масле? [нет/1 ч.л./1 ст.л.]» и добавляем масло как отдельный item по выбору.
4) Для пиццы — если есть «кусок/кусочки», но нет диаметра — спрашиваем «Укажите диаметр: 25/30/35 см». Масса = плотность×π×(d/2)^2/8×кол-во кусков.

Эти правила реализованы в боте (быстрые уточнения) и в QC‑слое (генерация clarifications).

### Vision: VISION_EXTRACT_V2

```text
Роль: Эксперт по распознаванию еды.
Задача: Определи блюда/продукты на фото и оцени количество и БЖУ.
Выведи JSON: {
  "items": [FoodItemEstimate...],
  "quality": {
    "not_food_probability": 0..1,
    "unrealistic_scene_probability": 0..1,
    "needs_clarification": true|false,
    "clarifications": ["краткий вопрос"...],
    "issues": ["обнаруженные проблемы"]
  }
}
Правила:
- Если на фото нет еды — not_food_probability≥0.8, добавь issue "no_food".
- Если масштаб/контекст нереалистичен — unrealistic_scene_probability≥0.7, добавь issue "unrealistic_scale".
- Если объём/масса неизвестны — оцени стандартную порцию для типа блюда и пометь assumptions.
- Разделяй комплексные блюда на разумные компоненты (соус, гарнир) только если явно видны.
- Единицы только g/ml/piece. Калории и БЖУ на оценённую порцию, не на 100 г.
```

### Text: TEXT_NORMALIZE_V2

```text
Роль: Нормализатор описаний еды.
Вход: Короткий текст пользователя о еде.
Выход JSON: { "items": [FoodItemEstimate...], "quality": QualityFlags }
Правила:
- Если веса/объёма нет, оцени стандартную порцию и добавь assumptions и вопрос в clarifications.
- Поддержи обобщения ("пицца пепперони среднего размера" → диаметр≈30 см, 1 порция).
```

### Fusion: FUSION_COMBINE_V1

```text
Роль: Мультимодальный консолидационный эксперт.
Вход: vision_json, text_json, voice_json (любой может быть пуст).
Задача: Свести в единый черновик MealDraft: объединить совпадающие позиции, разрешить конфликты по источникам/довериям, скорректировать порции по уточняющей информации (диаметр/масса/кол-во штук).
Выведи JSON MealDraft. totals = сумма по items. Если есть противоречия, needs_clarification=true и короткие вопросы.
Правила:
- При конфликте массы/количества: доверяй явно указанным числам из текста/голоса > визуальная оценка, если не противоречит изображению радикально. Иначе — запрос уточнения.
- Если пользователь дал дополнительную информацию позже — учитывай её как приоритетную правку (свежие источники > старые).
```

### Validation: VALIDATION_QC_V1

```text
Роль: Контроль качества оценок.
Вход: MealDraft, порционные приоритеты (справочник), макро-диапазоны для категорий.
Задача: Проверить аномалии (экстремально высокие/низкие ккал на 100 г, несоответствие макро‑профиля).
Выход: Обновлённый MealDraft. Если отклонение > разумного диапазона — needs_clarification и issue.
```

## Оценка порций и приоритеты

- Справочник `portion_priors` (внутренний JSON):
  - пицца: "slice_small": 90 g, "slice_medium": 120 g, "slice_large": 160 g; целая 30 см ≈ 850–1100 г
  - яйцо: 1 piece ≈ 50–60 g
  - банан: 1 piece ≈ 120–140 g
  - стейк/куриная грудка: порция ≈ 150–200 g
  - и т.д. (постепенно расширять)
- Если текст содержит размер/диаметр — пересчёт на массу по приоритету (пример для пиццы: масса ≈ 0.95 г/см² × π × (d/2)² / 8 на кусок; валидировать с допустимыми пределами).

## Оркестрация и состояние черновика

- Черновик `MealDraft` хранится в Redis по ключу `meal:draft:{user_id}` с TTL 10 мин, обновляется при каждом новом сообщении в «режиме дополнения».
- При каждом входе:
  1) Получить текущий `MealDraft` (или создать новый).
  2) Применить соответствующий экстрактор (vision/text/voice→text→text extractor).
  3) Выполнить Fusion и Validation.
  4) Сформировать «предварительную информацию». Если `quality.not_food_probability≥0.8` → ответ «Я не нашла в вашем сообщении еду…». Если `unrealistic_scene_probability≥0.7` → «Я не уверена… выглядит странно…».
  5) Показать кнопки: Сохранить / Отменить / Дополнить информацию.

## Коммуникация (шаблоны)

- **Нет еды**: «Я не нашла в вашем сообщении еду. Опиши более подробно что это»
- **Странная сцена**: «Я не уверена, что могу это записать, так как выглядит странно... Отправь заново»
- **Предварительная карточка**:
  - Текст:
    "Предварительная информация о продукте:\n— Название: {title}\nВес: {weight_g} г | Протеин: {protein_g} г | Жиры: {fat_g} г | Углеводы: {carb_g} г\nКалории: {kcal} ккал"
  - Кнопки: [Сохранить] [Отменить] [Дополнить информацию]
- **Сохранено**: «Сохранено ✅\nЗа сегодня: {kcal_day} ккал, Б:{p_day} Ж:{f_day} У:{c_day}»
- **Отменено**: «Добавление отменено»

## Правила принятия решения

- Порог «не еда»: `not_food_probability ≥ 0.8`.
- Порог «нереалистично»: `unrealistic_scene_probability ≥ 0.7`.
- Для отсутствующей массы: использовать стандартную порцию из справочника, отмечая assumptions и уточняющий вопрос.
- Приоритет источников для конфликтов: текст/голос c числами > vision оценка; при большой разнице — запрос уточнения.

## Карта юз‑кейсов

1) Фото без текста: Vision → Portion priors → QC → карточка. 
2) Фото не‑еды: Vision → not_food_probability↑ → сообщение «Я не нашла…».
3) Нереалистичная еда: Vision → unrealistic_scene_probability↑ → «Я не уверена…».
4) Фото + текст с размером: Vision + Text → Fusion (масса по диаметру) → QC → карточка.
5) Фото + голос с весом: Voice→STT→Text → Fusion (использовать вес из голоса) → QC → карточка.
6) Фото, затем доп. текст: обновление текущего `MealDraft` → Fusion → QC → обновлённая карточка.
7) Голос с описанием: STT → Text → Text extractor → Portion priors → QC → карточка.
8) Голос «яичница из 3 яиц»: STT → Text → яйца×3×~55 г → QC → карточка.
9) Текст без объёма → priors; при доп. тексте «2 плитки» → пересчёт.
10) Текст с массой/объёмом: Text extractor напрямую → QC → карточка.

## Формулы и эвристики (примеры)

- Пицца масса по диаметру: масса_целиком ≈ k × π × (d/2)²; k≈0.9–1.1 г/см² по стилю. Кусок = 1/8 от целой. Валидация в допустимых пределах.
- Яйца: 1 piece≈55 г, белок≈6.5 г, жир≈5 г, ккал≈72 (контекстно корректировать для жарки/масла).
- Картофель фри: порция малая≈75–100 г, средняя≈110–140 г, большая≈150–180 г.

## Интеграция с текущим кодом

- Vision: заменить/расширить `services/vision/openai_vision.py` промпт до V2 и добавлять `quality` поля; сохранять в `VisionInferenceRepo`.
- Text: расширить `services/llm/openai_normalize.py` схему до совместимой (`items` + `quality`).
- Фьюжн/валидация: новый модуль `services/vision/photo_pipeline.py`/`services/vision/worker.py` интегрируют Fusion+QC перед отправкой карточки.
- Сохранение: по нажатию «Сохранить» — использовать существующий `/api/meals` или `/api/photos/{image_id}/save` с `status=confirmed`.
- Черновик: хранить `MealDraft` в Redis, ключ `meal:draft:{user_id}` (TTL 10 мин), чтобы «Дополнить информацию» модифицировало тот же черновик.

## Псевдо‑логика Fusion

```pseudo
draft = load_draft(user_id) or empty
vision = run_vision_if_new(photos)
text = run_text_extractor_if_new(text_input)
voice = stt_then_text_extractor_if_new(voice_input)
draft = LLM_FUSION(vision, text, voice, prior_portions)
draft = LLM_VALIDATION_QC(draft, priors, macro_ranges)
save_draft(user_id, draft)
render_preview_and_buttons(draft)
```

## Ограничения и запасные стратегии

- Если JSON невалиден — ретрай с более низкой температурой/другой моделью; при повторном провале — сообщение с просьбой уточнить.
- Если фото очень тёмное/размытое — запросить новое фото.
- При отсутствии сети к OpenAI — локальные priors + простой хэндлинг (грубая оценка) и просьба подтвердить/уточнить.

## Приватность и безопасность

- Хранить медиа и расшифровки в соответствии с политикой приватности; ограничивать TTL черновиков.
- Логи промптов без персональных данных; PII редактировать/обрезать.

## Примеры ответов (сокр.)

```json
{
  "items": [
    {
      "name": "пицца пепперони, 1 кусок (диаметр 30 см)",
      "amount": 120,
      "unit": "g",
      "kcal": 320,
      "protein_g": 14,
      "fat_g": 14,
      "carb_g": 34,
      "confidence": 0.78,
      "assumptions": ["стандартная толщина"],
      "sources": ["vision", "text"]
    }
  ],
  "quality": {
    "not_food_probability": 0.03,
    "unrealistic_scene_probability": 0.08,
    "needs_clarification": false,
    "clarifications": [],
    "issues": []
  },
  "totals": {"kcal": 320, "protein_g": 14, "fat_g": 14, "carb_g": 34},
  "draft_id": "meal:draft:12345"
}
```

Эта спецификация покрывает указанные 10 сценариев и обеспечивает более высокую точность за счёт мультимодального фьюжна, порционных приоритетов и строгих QC‑правил.

