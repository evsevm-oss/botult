---
description: Project-wide rules and conventions for the Ultima Calories bot (backend, bot, webapp, ops)
globs:
  - "**/*.py"
  - "docs/**/*.md*"
  - "alembic/**/*.py"
  - "infra/**/*.py"
  - "bot/**/*.py"
  - "webapp/**/*"
alwaysApply: true
---

General
- Keep the repository free of secrets. Never commit .env, tokens, private keys. Use env.example for placeholders.
- Preserve existing indentation and line endings. Do not mix tabs/spaces or reformat unrelated code.
- Write explicit, readable code. Prefer clarity over cleverness. Fail fast and handle edge cases first.
- Use meaningful commit messages: feat(stageX): ..., fix(...): ..., docs(...): ...

Python (backend, bot)
- Python 3.11+. Use type hints on function signatures and public APIs; avoid Any.
- Naming: functions are verbs; variables are descriptive nouns; avoid abbreviations.
- Control flow: use guard clauses; avoid deep nesting (>2–3 levels); avoid bare except; no empty except.
- Errors: raise domain-specific exceptions where appropriate; never swallow exceptions silently.
- Comments: explain why, not what. Keep them concise. No TODOs left; implement or create an issue.
- Logging: use structlog with JSON. Include trace_id; log update type and user_id when available.

FastAPI (infra/api)
- Pydantic v2 models (schemas) only; no dicts in signatures. Response is APIResponse everywhere for consistency.
- Validate input in schemas; keep endpoints thin and call use-cases/repos.
- Always inject DB via Depends(get_session). Never create engines per-request.
- CORS: allow only needed origins (dev 5173, 3000 by default). No wildcards in production.

Aiogram (bot)
- v3 routers; keep handlers small and stateless; business logic in use-cases/services.
- FSM: explicit StatesGroup per flow; validate user input; clear state on completion/cancel.
- Middlewares: logging, trace-id, locale=ru connected globally.
- Do not run multiple pollers. Use a single systemd unit. Delete webhook on start.

Alembic & DB
- Use the async env pattern (already in alembic/env.py). Run:
  - export PYTHONPATH=/root/calorie-photo-bot
  - .venv/bin/alembic upgrade head
- One logical change per migration. Avoid editing applied migrations.
- Enforce constraints and indexes (FK ondelete, CHECK, UNIQUE, composite indexes) per infra/db/models.py.

Repositories & Use-cases
- Repos return simple DTO/dict structures, not ORM models.
- Keep transactions short; commit in repo after write operations.
- Use-cases orchestrate validations, calculations, and repo calls; they should be side-effect free except via repos.

WebApp (vite/react)
- No secrets in client code. Use VITE_API_BASE to target API in dev.
- Keep profile form minimal; rely on server validation and return budgets for previews when helpful.

Deployment (VPS quick rules)
- Zip locally excluding: .env, .venv, node_modules, __pycache__, .DS_Store, .git.
- On VPS: unzip → rm -rf .venv → python3 -m venv .venv → pip -U pip → pip -r requirements.txt.
- .env hygiene: single DATABASE_URL line; normalize ALLOWED_ORIGINS; no CRLF; set TELEGRAM_BOT_TOKEN.
- Alembic with PYTHONPATH set; then systemctl restart ultima-api and ultima-bot.
- Clear webhook before polling: deleteWebhook?drop_pending_updates=true

Security & privacy
- Redact tokens in logs and screenshots. Never paste secrets into docs or code.
- Validate Telegram tokens with getMe before enabling the bot.

